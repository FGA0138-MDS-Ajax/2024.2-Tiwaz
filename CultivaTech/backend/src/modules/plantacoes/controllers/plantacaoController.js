const plantacaoService = require("../services/plantacaoService");
const Plantacao = require("../models/Plantacao"); // Corrigir a importa√ß√£o do modelo
// const { Plantacao } = require("../models");

// üìå Fun√ß√£o para formatar data no padr√£o DD/MM/YYYY
const formatarData = (data) => {
  // Se a data j√° cont√©m barras, assumimos que est√° no formato correto
  if (data.includes("/")) return data;

  // Se a data tiver exatamente 8 d√≠gitos (ex: 21082020), adicionamos as barras
  if (data.length === 8) {
    return `${data.substring(0, 2)}/${data.substring(2, 4)}/${data.substring(4, 8)}`;
  }

  throw new Error("Formato de data inv√°lido! Use DD/MM/YYYY.");
};

// üìå Cadastrar Planta√ß√£o
const cadastrarPlantacao = async (req, res) => {
  try {
    const { nome, tipo, areaPlantada, quantidadePlantada, dataPlantio, custoInicial } = req.body;

    // üõë Verifica√ß√£o de campos obrigat√≥rios
    if (!nome || !tipo || (!areaPlantada && !quantidadePlantada) || !dataPlantio || !custoInicial) {
      return res.status(400).json({
        success: false,
        error: "Todos os campos obrigat√≥rios devem ser preenchidos!",
      });
    }

    // üìÖ Formatar a data corretamente
    let dataFormatada;
    try {
      dataFormatada = formatarData(dataPlantio);
    } catch (error) {
      return res.status(400).json({ success: false, error: error.message });
    }

    // ‚úÖ Cadastra nova planta√ß√£o
    const novaPlantacao = await plantacaoService.cadastrarPlantacao({
      nome,
      tipo,
      areaPlantada: areaPlantada || null,
      quantidadePlantada: quantidadePlantada || null,
      dataPlantio: dataFormatada,
      custoInicial,
    });

    console.log("‚úÖ Planta√ß√£o cadastrada com sucesso:", novaPlantacao);

    return res.status(201).json({
      success: true,
      message: "Planta√ß√£o cadastrada com sucesso!",
      data: novaPlantacao,
    });
  } catch (error) {
    console.error("‚ùå Erro ao cadastrar planta√ß√£o:", error.stack);
    return res.status(500).json({
      success: false,
      error: "Erro ao cadastrar planta√ß√£o!",
      details: error.message || "Erro desconhecido.",
    });
  }
};

// üìå Listar Planta√ß√µes
const listarPlantacoes = async (req, res) => {
  try {
    console.log("üìå Requisi√ß√£o recebida para listar planta√ß√µes...");

    // üõë Verifica se o modelo Plantacao est√° definido
    if (typeof Plantacao === "undefined") {
      console.error("‚ùå Erro: Modelo 'Plantacao' n√£o encontrado. Verifique a importa√ß√£o.");
      return res.status(500).json({
        success: false,
        error: "Erro interno do servidor: Modelo 'Plantacao' n√£o encontrado.",
      });
    }

    // üîç Busca todas as planta√ß√µes no banco de dados
    const plantacoes = await Plantacao.findAll();

    if (!plantacoes || plantacoes.length === 0) {
      console.warn("‚ö†Ô∏è Nenhuma planta√ß√£o encontrada no banco.");
      return res.status(200).json({
        success: true,
        message: "Nenhuma planta√ß√£o encontrada.",
        data: [],
      });
    }

    console.log(`‚úÖ ${plantacoes.length} planta√ß√µes encontradas!`);
    return res.status(200).json({
      success: true,
      message: "Planta√ß√µes encontradas!",
      data: plantacoes,
    });
  } catch (error) {
    console.error("‚ùå Erro ao listar planta√ß√µes:", error.message || error);
    return res.status(500).json({
      success: false,
      error: "Erro ao listar planta√ß√µes!",
      details: error.message || "Erro desconhecido.",
    });
  }
};

// üìå Atualizar Planta√ß√£o
const atualizarPlantacao = async (req, res) => {
  try {
    const { id } = req.params;
    const { nome, tipo, areaPlantada, quantidadePlantada, dataPlantio, custoInicial } = req.body;

    // üìÖ Formatar a data corretamente antes da atualiza√ß√£o
    let dataFormatada;
    try {
      dataFormatada = formatarData(dataPlantio);
    } catch (error) {
      return res.status(400).json({ success: false, error: error.message });
    }

    // üîÑ Atualiza a planta√ß√£o
    const plantacaoAtualizada = await plantacaoService.atualizarPlantacao(id, {
      nome,
      tipo,
      areaPlantada: areaPlantada || null,
      quantidadePlantada: quantidadePlantada || null,
      dataPlantio: dataFormatada,
      custoInicial,
    });

    if (!plantacaoAtualizada) {
      return res.status(404).json({
        success: false,
        error: "Planta√ß√£o n√£o encontrada!",
      });
    }

    console.log(`‚úÖ Planta√ß√£o ${id} atualizada com sucesso!`);

    return res.status(200).json({
      success: true,
      message: "Planta√ß√£o atualizada com sucesso!",
      data: plantacaoAtualizada,
    });
  } catch (error) {
    console.error("‚ùå Erro ao atualizar planta√ß√£o:", error.stack);
    return res.status(500).json({
      success: false,
      error: "Erro ao atualizar planta√ß√£o!",
      details: error.message || "Erro desconhecido.",
    });
  }
};

// üìå Excluir Planta√ß√£o
const excluirPlantacao = async (req, res) => {
  try {
    const { id } = req.params;

    // üóëÔ∏è Exclui a planta√ß√£o
    const plantacaoExcluida = await plantacaoService.excluirPlantacao(id);

    if (!plantacaoExcluida) {
      return res.status(404).json({
        success: false,
        error: "Planta√ß√£o n√£o encontrada!",
      });
    }

    console.log(`‚úÖ Planta√ß√£o ${id} exclu√≠da com sucesso!`);

    return res.status(200).json({
      success: true,
      message: "Planta√ß√£o exclu√≠da com sucesso!",
    });
  } catch (error) {
    console.error("‚ùå Erro ao excluir planta√ß√£o:", error.stack);
    return res.status(500).json({
      success: false,
      error: "Erro ao excluir planta√ß√£o!",
      details: error.message || "Erro desconhecido.",
    });
  }
};

const fecharPlantacao = async (req, res) => {
  try {
    const { id } = req.params;
    const plantacao = await Plantacao.findByPk(id);

    if (!plantacao) {
      return res.status(404).json({ success: false, error: "Planta√ß√£o n√£o encontrada!" });
    }

    plantacao.status = "Colhido"; // Fecha a planta√ß√£o
    await plantacao.save();

    return res.status(200).json({
      success: true,
      message: "Planta√ß√£o fechada com sucesso!",
      data: plantacao,
    });
  } catch (error) {
    console.error("Erro ao fechar planta√ß√£o:", error);
    return res.status(500).json({ success: false, error: "Erro ao fechar planta√ß√£o!" });
  }
};

module.exports = {
  cadastrarPlantacao,
  listarPlantacoes,
  atualizarPlantacao,
  excluirPlantacao,
  fecharPlantacao,
};